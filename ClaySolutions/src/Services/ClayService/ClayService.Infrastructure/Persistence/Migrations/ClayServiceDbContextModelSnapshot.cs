// <auto-generated />
using System;
using ClayService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClayService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ClayServiceDbContext))]
    partial class ClayServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClayService.Domain.Entities.Door", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Doors");
                });

            modelBuilder.Entity("ClayService.Domain.Entities.EventHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("DoorId")
                        .HasColumnType("bigint");

                    b.Property<long>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("OperationResult")
                        .HasColumnType("bit");

                    b.Property<byte>("SourceType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("TagCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoorId", "CreatedDate");

                    b.HasIndex("UserId", "CreatedDate");

                    b.ToTable("EventHistories");
                });

            modelBuilder.Entity("ClayService.Domain.Entities.Office", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("offices");
                });

            modelBuilder.Entity("ClayService.Domain.Entities.PhysicalTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TagCode")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PhysicalTag");
                });

            modelBuilder.Entity("ClayService.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PhysicalTagId")
                        .IsUnicode(true)
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalTagId")
                        .IsUnique()
                        .HasFilter("[PhysicalTagId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DoorUser", b =>
                {
                    b.Property<long>("DoorsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("DoorsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("DoorUser");
                });

            modelBuilder.Entity("OfficeUser", b =>
                {
                    b.Property<long>("OfficesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("OfficesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("OfficeUser");
                });

            modelBuilder.Entity("ClayService.Domain.Entities.Door", b =>
                {
                    b.HasOne("ClayService.Domain.Entities.Office", "Office")
                        .WithMany("Doors")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("ClayService.Domain.Entities.User", b =>
                {
                    b.HasOne("ClayService.Domain.Entities.PhysicalTag", "PhysicalTag")
                        .WithOne("User")
                        .HasForeignKey("ClayService.Domain.Entities.User", "PhysicalTagId");

                    b.Navigation("PhysicalTag");
                });

            modelBuilder.Entity("DoorUser", b =>
                {
                    b.HasOne("ClayService.Domain.Entities.Door", null)
                        .WithMany()
                        .HasForeignKey("DoorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClayService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OfficeUser", b =>
                {
                    b.HasOne("ClayService.Domain.Entities.Office", null)
                        .WithMany()
                        .HasForeignKey("OfficesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClayService.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClayService.Domain.Entities.Office", b =>
                {
                    b.Navigation("Doors");
                });

            modelBuilder.Entity("ClayService.Domain.Entities.PhysicalTag", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
